import time
import requests
import importlib
from pathlib import Path
import speedtest
from pymongo import MongoClient
from telethon import events
from config import BOT, MONGO_URI, OWNER_ID, SUDO_USERS
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to check if the user is authorized
async def is_authorized_user(user_id):
    # Check if the user is the owner
    if str(user_id) == str(OWNER_ID):
        return True
    
    # Check if the user is in the config's SUDO_USERS list
    if str(user_id) in map(str, SUDO_USERS):
        return True

    # Check if the user is in the database sudo_users
    try:
        db = MongoClient(MONGO_URI).get_database()
        sudo_users = db.sudo_users.find_one({"user_id": user_id})
        if sudo_users:
            return True
    except Exception as e:
        logger.error(f"Error while checking sudo users: {e}")

    return False

# Speed Test
def perform_speed_test():
    logger.info("Performing speed test...")
    try:
        st = speedtest.Speedtest()
        st.get_best_server()
        download_speed = st.download() / 1_000_000  # Mbps
        upload_speed = st.upload() / 1_000_000  # Mbps
        ping = st.results.ping
        logger.info(f"Speed Test - DL: {download_speed:.2f} Mbps, UL: {upload_speed:.2f} Mbps, Ping: {ping} ms")
        return download_speed, upload_speed, ping
    except Exception as e:
        logger.error("Speed test failed", exc_info=True)
        raise RuntimeError("U…¥·¥Ä ô ü·¥á ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è s·¥ò·¥á·¥á·¥Ö·¥õ·¥ás·¥õ s·¥á Ä·¥†·¥á Äs. T Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.")

# Database Connection Test
def check_database_connection():
    try:
        client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
        client.server_info()
        return True, None
    except Exception as e:
        return False, str(e)

# ISP Info
def get_isp_info():
    try:
        response = requests.get("https://ipinfo.io/json")
        data = response.json()
        return data.get("ip", "N/A"), data.get("city", "N/A"), data.get("country", "N/A"), data.get("org", "N/A")
    except requests.RequestException:
        return "N/A", "N/A", "N/A", "N/A"

# Module Health Check
def check_module_health(module_name):
    try:
        module = importlib.import_module(f"src.modules.{module_name}")
        if not hasattr(module, 'BOT'):
            return False, f"‚ùå {module_name} missing 'BOT' object."
        missing = [
            func for func in ['update_admins', 'handle_chat_action']
            if not callable(getattr(module, func, None))
        ]
        if missing:
            return False, f"‚ùå {module_name} ·¥ç…™ss…™…¥…¢: {', '.join(missing)}."
        return True, f"üå± {module_name}  ü·¥è·¥Ä·¥Ö·¥á·¥Ö “ì…™…¥·¥á."
    except Exception as e:
        return False, f"‚ùå {module_name} ·¥á Ä Ä·¥è Ä: {str(e)}"

# /health - Basic Health Check
@BOT.on(events.NewMessage(pattern="/health"))
async def healthcheck(event):
    try:
        user_id = event.sender_id

        if not await is_authorized_user(user_id):
            await event.reply("‚ùå ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä.")
            return
        
        start = time.time()
        msg = await BOT.send_message(event.chat_id, "R·¥ú…¥…¥…™…¥…¢ …¢·¥ú·¥Ä Ä·¥Ö…™·¥Ä…¥  ú·¥á·¥Ä ü·¥õ ú ·¥Ñ ú·¥á·¥Ñ·¥ã·¥ú·¥òüçÉ...")

        # Ping
        ping_time = time.time() - start

        # DB Check
        db_ok, db_error = check_database_connection()
        db_status = "C·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö" if db_ok else f"F·¥Ä…™ ü·¥á·¥Ö: {db_error}"

        # ISP Info
        ip, city, country, isp = get_isp_info()

        # Module Checks
        modules = ["admincache", "mention", "start", "editmode", "nsfw", "purge", "broadcast", "pretender", "help", "delete"]
        module_report = []
        for m in modules:
            ok, status = check_module_health(m)
            module_report.append(f"{status} ({'‚úÖ' if ok else '‚ùå'})")

        # Report
        report = [
            " **…¢·¥ú·¥Ä Ä·¥Ö…™·¥Ä…¥  ú·¥á·¥Ä ü·¥õ ú ·¥Ñ ú·¥á·¥Ñ·¥ã·¥ú·¥ò  Ä·¥á·¥ò·¥è Ä·¥õ‚òòÔ∏è:**",
            f"‚è±Ô∏è  Ä·¥ás·¥ò·¥è…¥s·¥á ·¥õ…™·¥ç·¥á: `{ping_time * 1000:.2f} ·¥çs`",
            f"üê≥ ·¥Ö ô s·¥õ·¥Ä·¥õ·¥ús: `{db_status}`",
            "",
            "üåê **ISP I…¥“ì·¥è:**",
            f"I·¥ò: `{ip}`",
            f"C…™·¥õ è: `{city}`, C·¥è·¥ú…¥·¥õ Ä è: `{country}`",
            f"Is·¥ò: `{isp}`",
            "",
            "**M·¥è·¥Ö·¥ú ü·¥ás:**",
            *module_report,
            "",
            f"‚è≥ T·¥è·¥õ·¥Ä ü T…™·¥ç·¥á: `{time.time() - start:.2f} s·¥á·¥Ñ`"
        ]

        await msg.edit("\n".join(report))
    except Exception as e:
        logger.error("Health check failed", exc_info=True)
        await event.reply(f"üî¥ ** ú·¥á·¥Ä ü·¥õ ú ·¥Ñ ú·¥á·¥Ñ·¥ã·¥ú·¥ò “ì·¥Ä…™ ü·¥á·¥Ö:** `{e}`")

# /sptest - Speed Test Only
@BOT.on(events.NewMessage(pattern="/sptest"))
async def sptest(event):
    try:
        user_id = event.sender_id

        if not await is_authorized_user(user_id):
            await event.reply("‚ùå ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä.")
            return
        
        msg = await event.respond("R·¥ú…¥…¥…™…¥…¢ s·¥ò·¥á·¥á·¥Ö ·¥õ·¥ás·¥õ.  ú·¥è ü·¥Ö ·¥è…¥...")
        download_speed, upload_speed, ping = perform_speed_test()

        result = "\n".join([
            "üèéÔ∏è **S·¥ò·¥á·¥á·¥Ö ·¥õ·¥ás·¥õ  Ä·¥ás·¥ú ü·¥õs:**",
            f"üì• D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö: `{download_speed:.2f} M ô·¥òs`",
            f"üì§ U·¥ò ü·¥è·¥Ä·¥Ö: `{upload_speed:.2f} M ô·¥òs`",
            f"üèì P…™…¥…¢  ü·¥Ä·¥õ·¥á…¥·¥Ñ è: `{ping} ·¥çs`"
        ])
        await msg.edit(result)

    except RuntimeError as e:
        await event.reply(f"‚ö†Ô∏è {str(e)}")
    except Exception as e:
        logger.error("Unexpected error during speedtest", exc_info=True)
        await event.reply("‚ö†Ô∏è ·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä ·¥è Ä ·¥ç·¥Ä è …™s·¥ò  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥õ·¥è ·¥Ñ ú·¥ã s·¥ò·¥á·¥á·¥Ö·¥õ·¥ás·¥õ.")
